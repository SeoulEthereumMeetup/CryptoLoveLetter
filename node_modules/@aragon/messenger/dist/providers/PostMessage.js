'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _Provider2 = require('./Provider');

var _Provider3 = _interopRequireDefault(_Provider2);

var _Rx = require('rxjs/Rx');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * A provider that uses the PostMessage API to pass messages between frames and WebWorkers.
 *
 * @param {Object} [target=window.parent] An object implementing the PostMessage API.
 * @class PostMessage
 * @extends {Provider}
 */
var PostMessage = function (_Provider) {
  _inherits(PostMessage, _Provider);

  function PostMessage() {
    var target = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : window.parent;

    _classCallCheck(this, PostMessage);

    var _this = _possibleConstructorReturn(this, (PostMessage.__proto__ || Object.getPrototypeOf(PostMessage)).call(this));

    _this.target = target;
    return _this;
  }

  /**
   * An observable of messages being sent to this provider.
   *
   * @memberof PostMessage
   * @instance
   * @returns {Observable}
   */


  _createClass(PostMessage, [{
    key: 'messages',
    value: function messages() {
      var _this2 = this;

      return _Rx.Observable.fromEvent(window, 'message').filter(function (event) {
        return event.source === _this2.target;
      }).pluck('data');
    }

    /**
     * Send a payload to the underlying target of this provider.
     *
     * @param {Object} payload
     * @memberof PostMessage
     * @instance
     */

  }, {
    key: 'send',
    value: function send(payload) {
      this.target.postMessage(payload, '*');
    }
  }]);

  return PostMessage;
}(_Provider3.default);

exports.default = PostMessage;